# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  rules:


analyzer:
  plugins:
    - dart_code_metrics

dart_code_metrics:
  anti-patterns:
  - long-method:
      severity: warning
      exclude:
        - test/**
  - long-parameter-list:
      severity: warning
  metrics:
    cyclomatic-complexity: 20
    number-of-arguments: 4
    maximum-nesting-level: 5
    lines-of-code: 100
    source-lines-of-code: 50
    maintainability-index: 50
    number-of-methods: 10
    number-of-parameters: 4
    weight-of-class: 0.33
    # technical-debt is optional
  metrics-exclude:
    - test/**
  rules:
    #for dart
    - avoid-global-state
    - avoid-missing-enum-constant-in-map
    - avoid-unnecessary-type-assertions
    - avoid-unnecessary-type-casts
    - binary-expression-operand-order
    - double-literal-format
    - no-boolean-literal-compare
    - no-empty-block
    - no-object-declaration:
        exclude:
          - test/**
    - prefer-conditional-expressions #optional
    - prefer-trailing-comma:
        exclude:
          - test/**
    #for flutter
    - always-remove-listener
    - avoid-unnecessary-setstate
